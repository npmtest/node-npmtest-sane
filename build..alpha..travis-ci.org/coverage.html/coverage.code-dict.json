{"/home/travis/build/npmtest/node-npmtest-sane/test.js":"/* istanbul instrument in package npmtest_sane */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sane/lib.npmtest_sane.js":"/* istanbul instrument in package npmtest_sane */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sane = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sane = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sane/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sane && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sane */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sane\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sane.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sane.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sane.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sane.__dirname + '/lib.npmtest_sane.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sane/node_modules/sane/index.js":"'use strict';\n\nvar NodeWatcher = require('./src/node_watcher');\nvar PollWatcher = require('./src/poll_watcher');\nvar WatchmanWatcher = require('./src/watchman_watcher');\n\nfunction sane(dir, options) {\n  options = options || {};\n  if (options.watcher) {\n    var WatcherClass = require(options.watcher);\n    return new WatcherClass(dir, options);\n  } else if (options.poll) {\n    return new PollWatcher(dir, options);\n  } else if (options.watchman) {\n    return new WatchmanWatcher(dir, options);\n  } else {\n    return new NodeWatcher(dir, options);\n  }\n}\n\nmodule.exports = sane;\nsane.NodeWatcher = NodeWatcher;\nsane.PollWatcher = PollWatcher;\nsane.WatchmanWatcher = WatchmanWatcher;\n","/home/travis/build/npmtest/node-npmtest-sane/node_modules/sane/src/node_watcher.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar walker = require('walker');\nvar common = require('./common');\nvar platform = require('os').platform();\nvar EventEmitter = require('events').EventEmitter;\nvar anymatch = require('anymatch');\n\n/**\n * Constants\n */\n\nvar DEFAULT_DELAY = common.DEFAULT_DELAY;\nvar CHANGE_EVENT = common.CHANGE_EVENT;\nvar DELETE_EVENT = common.DELETE_EVENT;\nvar ADD_EVENT = common.ADD_EVENT;\nvar ALL_EVENT = common.ALL_EVENT;\n\n/**\n * Export `NodeWatcher` class.\n */\n\nmodule.exports = NodeWatcher;\n\n/**\n * Watches `dir`.\n *\n * @class NodeWatcher\n * @param {String} dir\n * @param {Object} opts\n * @public\n */\n\nfunction NodeWatcher(dir, opts) {\n  opts = common.assignOptions(this, opts);\n\n  this.watched = Object.create(null);\n  this.changeTimers = Object.create(null);\n  this.dirRegistery = Object.create(null);\n  this.root = path.resolve(dir);\n  this.watchdir = this.watchdir.bind(this);\n  this.register = this.register.bind(this);\n\n  this.watchdir(this.root);\n  recReaddir(\n    this.root,\n    this.watchdir,\n    this.register,\n    this.emit.bind(this, 'ready'),\n    this.ignored\n  );\n}\n\nNodeWatcher.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Register files that matches our globs to know what to type of event to\n * emit in the future.\n *\n * Registery looks like the following:\n *\n *  dirRegister => Map {\n *    dirpath => Map {\n *       filename => true\n *    }\n *  }\n *\n * @param {string} filepath\n * @return {boolean} whether or not we have registered the file.\n * @private\n */\n\nNodeWatcher.prototype.register = function(filepath) {\n  var relativePath = path.relative(this.root, filepath);\n  if (!common.isFileIncluded(\n    this.globs,\n    this.dot,\n    this.doIgnore,\n    relativePath)) {\n    return false;\n  }\n\n  var dir = path.dirname(filepath);\n  if (!this.dirRegistery[dir]) {\n    this.dirRegistery[dir] = Object.create(null);\n  }\n\n  var filename = path.basename(filepath);\n  this.dirRegistery[dir][filename] = true;\n\n  return true;\n};\n\n/**\n * Removes a file from the registery.\n *\n * @param {string} filepath\n * @private\n */\n\nNodeWatcher.prototype.unregister = function(filepath) {\n  var dir = path.dirname(filepath);\n  if (this.dirRegistery[dir]) {\n    var filename = path.basename(filepath);\n    delete this.dirRegistery[dir][filename];\n  }\n};\n\n/**\n * Removes a dir from the registery.\n *\n * @param {string} dirpath\n * @private\n */\n\nNodeWatcher.prototype.unregisterDir = function(dirpath) {\n  if (this.dirRegistery[dirpath]) {\n    delete this.dirRegistery[dirpath];\n  }\n};\n\n/**\n * Checks if a file or directory exists in the registery.\n *\n * @param {string} fullpath\n * @return {boolean}\n * @private\n */\n\nNodeWatcher.prototype.registered = function(fullpath) {\n  var dir = path.dirname(fullpath);\n  return this.dirRegistery[fullpath] ||\n    this.dirRegistery[dir] && this.dirRegistery[dir][path.basename(fullpath)];\n};\n\n/**\n * Watch a directory.\n *\n * @param {string} dir\n * @private\n */\n\nNodeWatcher.prototype.watchdir = function(dir) {\n  if (this.watched[dir]) {\n    return;\n  }\n\n  var watcher = fs.watch(\n    dir,\n    { persistent: true },\n    this.normalizeChange.bind(this, dir)\n  );\n  this.watched[dir] = watcher;\n\n  // Workaround Windows node issue #4337.\n  if (platform === 'win32') {\n    watcher.on('error', function(error) {\n      if (error.code !== 'EPERM') {\n        throw error;\n      }\n    });\n  }\n\n  if (this.root !== dir) {\n    this.register(dir);\n  }\n};\n\n/**\n * Stop watching a directory.\n *\n * @param {string} dir\n * @private\n */\n\nNodeWatcher.prototype.stopWatching = function(dir) {\n  if (this.watched[dir]) {\n    this.watched[dir].close();\n    delete this.watched[dir];\n  }\n};\n\n/**\n * End watching.\n *\n * @public\n */\n\nNodeWatcher.prototype.close = function(callback) {\n  Object.keys(this.watched).forEach(this.stopWatching, this);\n  this.removeAllListeners();\n  if (typeof callback === 'function') {\n    setImmediate(callback.bind(null, null, true));\n  }\n};\n\n/**\n * On some platforms, as pointed out on the fs docs (most likely just win32)\n * the file argument might be missing from the fs event. Try to detect what\n * change by detecting if something was deleted or the most recent file change.\n *\n * @param {string} dir\n * @param {string} event\n * @param {string} file\n * @public\n */\n\nNodeWatcher.prototype.detectChangedFile = function(dir, event, callback) {\n  if (!this.dirRegistery[dir]) {\n    return;\n  }\n\n  var found = false;\n  var closest = {mtime: 0};\n  var c = 0;\n  Object.keys(this.dirRegistery[dir]).forEach(function(file, i, arr) {\n    fs.lstat(path.join(dir, file), function(error, stat) {\n      if (found) {\n        return;\n      }\n\n      if (error) {\n        if (error.code === 'ENOENT' ||\n            (platform === 'win32' && error.code === 'EPERM')) {\n          found = true;\n          callback(file);\n        } else {\n          this.emit('error', error);\n        }\n      } else {\n        if (stat.mtime > closest.mtime) {\n          stat.file = file;\n          closest = stat;\n        }\n        if (arr.length === ++c) {\n          callback(closest.file);\n        }\n      }\n    }.bind(this));\n  }, this);\n};\n\n/**\n * Normalize fs events and pass it on to be processed.\n *\n * @param {string} dir\n * @param {string} event\n * @param {string} file\n * @public\n */\n\nNodeWatcher.prototype.normalizeChange = function(dir, event, file) {\n  if (!file) {\n    this.detectChangedFile(dir, event, function(actualFile) {\n      if (actualFile) {\n        this.processChange(dir, event, actualFile);\n      }\n    }.bind(this));\n  } else {\n    this.processChange(dir, event, path.normalize(file));\n  }\n};\n\n/**\n * Process changes.\n *\n * @param {string} dir\n * @param {string} event\n * @param {string} file\n * @public\n */\n\nNodeWatcher.prototype.processChange = function(dir, event, file) {\n  var fullPath = path.join(dir, file);\n  var relativePath = path.join(path.relative(this.root, dir), file);\n  fs.lstat(fullPath, function(error, stat) {\n    if (error && error.code !== 'ENOENT') {\n      this.emit('error', error);\n    } else if (!error && stat.isDirectory()) {\n      // win32 emits usless change events on dirs.\n      if (event !== 'change') {\n        this.watchdir(fullPath);\n        if (common.isFileIncluded(\n          this.globs,\n          this.dot,\n          this.doIgnore,\n          relativePath)) {\n          this.emitEvent(ADD_EVENT, relativePath, stat);\n        }\n      }\n    } else {\n      var registered = this.registered(fullPath);\n      if (error && error.code === 'ENOENT') {\n        this.unregister(fullPath);\n        this.stopWatching(fullPath);\n        this.unregisterDir(fullPath);\n        if (registered) {\n          this.emitEvent(DELETE_EVENT, relativePath);\n        }\n      } else if (registered) {\n        this.emitEvent(CHANGE_EVENT, relativePath, stat);\n      } else {\n        if (this.register(fullPath)) {\n          this.emitEvent(ADD_EVENT, relativePath, stat);\n        }\n      }\n    }\n  }.bind(this));\n};\n\n/**\n * Triggers a 'change' event after debounding it to take care of duplicate\n * events on os x.\n *\n * @private\n */\n\nNodeWatcher.prototype.emitEvent = function(type, file, stat) {\n  var key = type + '-' + file;\n  var addKey = ADD_EVENT + '-' + file;\n  if (type === CHANGE_EVENT && this.changeTimers[addKey]) {\n    // Ignore the change event that is immediately fired after an add event.\n    // (This happens on Linux).\n    return;\n  }\n  clearTimeout(this.changeTimers[key]);\n  this.changeTimers[key] = setTimeout(function() {\n    delete this.changeTimers[key];\n    this.emit(type, file, this.root, stat);\n    this.emit(ALL_EVENT, type, file, this.root, stat);\n  }.bind(this), DEFAULT_DELAY);\n};\n\n/**\n * Traverse a directory recursively calling `callback` on every directory.\n *\n * @param {string} dir\n * @param {function} dirCallback\n * @param {function} fileCallback\n * @param {function} endCallback\n * @param {*} ignored\n * @private\n */\n\nfunction recReaddir(dir, dirCallback, fileCallback, endCallback, ignored) {\n  walker(dir)\n    .filterDir(function(currentDir) {\n      return !anymatch(ignored, currentDir);\n    })\n    .on('dir', normalizeProxy(dirCallback))\n    .on('file', normalizeProxy(fileCallback))\n    .on('end', function() {\n      if (platform === 'win32') {\n        setTimeout(endCallback, 1000);\n      } else {\n        endCallback();\n      }\n    });\n}\n\n/**\n * Returns a callback that when called will normalize a path and call the\n * original callback\n *\n * @param {function} callback\n * @return {function}\n * @private\n */\n\nfunction normalizeProxy(callback) {\n  return function(filepath) {\n    return callback(path.normalize(filepath));\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-sane/node_modules/sane/src/common.js":"'use strict';\n\nvar anymatch = require('anymatch');\nvar minimatch = require('minimatch');\n\n/**\n * Constants\n */\n\nexports.DEFAULT_DELAY = 100;\nexports.CHANGE_EVENT = 'change';\nexports.DELETE_EVENT = 'delete';\nexports.ADD_EVENT = 'add';\nexports.ALL_EVENT = 'all';\n\n/**\n * Assigns options to the watcher.\n *\n * @param {NodeWatcher|PollWatcher|WatchmanWatcher} watcher\n * @param {?object} opts\n * @return {boolean}\n * @public\n */\n\nexports.assignOptions = function(watcher, opts) {\n  opts = opts || {};\n  watcher.globs = opts.glob || [];\n  watcher.dot = opts.dot || false;\n  watcher.ignored = opts.ignored || false;\n\n  if (!Array.isArray(watcher.globs)) {\n    watcher.globs = [watcher.globs];\n  }\n  watcher.hasIgnore = Boolean(opts.ignored) &&\n    !(Array.isArray(opts) && opts.length > 0);\n  watcher.doIgnore = opts.ignored ? anymatch(opts.ignored) : function () {\n    return false;\n  };\n  return opts;\n};\n\n/**\n * Checks a file relative path against the globs array.\n *\n * @param {array} globs\n * @param {string} relativePath\n * @return {boolean}\n * @public\n */\n\nexports.isFileIncluded = function(globs, dot, doIgnore, relativePath) {\n  var matched;\n  if (globs.length) {\n    for (var i = 0; i < globs.length; i++) {\n      if (minimatch(relativePath, globs[i], {dot: dot}) &&\n        !doIgnore(relativePath)) {\n        matched = true;\n        break;\n      }\n    }\n  } else {\n    // Make sure we honor the dot option if even we're not using globs.\n    matched = (dot || minimatch(relativePath, '**/*')) &&\n      !doIgnore(relativePath);\n  }\n  return matched;\n};\n","/home/travis/build/npmtest/node-npmtest-sane/node_modules/sane/src/poll_watcher.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar watch = require('watch');\nvar common = require('./common');\nvar EventEmitter = require('events').EventEmitter;\n\n/**\n * Constants\n */\n\nvar DEFAULT_DELAY = common.DEFAULT_DELAY;\nvar CHANGE_EVENT = common.CHANGE_EVENT;\nvar DELETE_EVENT = common.DELETE_EVENT;\nvar ADD_EVENT = common.ADD_EVENT;\nvar ALL_EVENT = common.ALL_EVENT;\n\n/**\n * Export `PollWatcher` class.\n */\n\nmodule.exports = PollWatcher;\n\n/**\n * Watches `dir`.\n *\n * @class PollWatcher\n * @param String dir\n * @param {Object} opts\n * @public\n */\n\nfunction PollWatcher(dir, opts) {\n  opts = common.assignOptions(this, opts);\n\n  this.watched = Object.create(null);\n  this.root = path.resolve(dir);\n\n  watch.createMonitor(\n    this.root,\n    { interval: opts.interval || DEFAULT_DELAY,\n      filter: this.filter.bind(this)\n    },\n    this.init.bind(this)\n  );\n}\n\nPollWatcher.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Given a fullpath of a file or directory check if we need to watch it.\n *\n * @param {string} filepath\n * @param {object} stat\n * @private\n */\n\nPollWatcher.prototype.filter = function(filepath, stat) {\n  return stat.isDirectory() || common.isFileIncluded(\n    this.globs,\n    this.dot,\n    this.doIgnore,\n    path.relative(this.root, filepath)\n  );\n};\n\n/**\n * Initiate the polling file watcher with the event emitter passed from\n * `watch.watchTree`.\n *\n * @param {EventEmitter} monitor\n * @public\n */\n\nPollWatcher.prototype.init = function(monitor) {\n  this.watched = monitor.files;\n  monitor.on('changed', this.emitEvent.bind(this, CHANGE_EVENT));\n  monitor.on('removed', this.emitEvent.bind(this, DELETE_EVENT));\n  monitor.on('created', this.emitEvent.bind(this, ADD_EVENT));\n  // 1 second wait because mtime is second-based.\n  setTimeout(this.emit.bind(this, 'ready'), 1000);\n};\n\n/**\n * Transform and emit an event comming from the poller.\n *\n * @param {EventEmitter} monitor\n * @public\n */\n\nPollWatcher.prototype.emitEvent = function(type, file, stat) {\n  file = path.relative(this.root, file);\n\n  if (type === DELETE_EVENT) {\n    // Matching the non-polling API\n    stat = null;\n  }\n\n  this.emit(type, file, this.root, stat);\n  this.emit(ALL_EVENT, type, file, this.root, stat);\n};\n\n/**\n * End watching.\n *\n * @public\n */\n\nPollWatcher.prototype.close = function(callback) {\n  Object.keys(this.watched).forEach(function(filepath) {\n    fs.unwatchFile(filepath);\n  });\n  this.removeAllListeners();\n  if (typeof callback === 'function') {\n    setImmediate(callback.bind(null, null, true));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sane/node_modules/sane/src/watchman_watcher.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar assert = require('assert');\nvar common = require('./common');\nvar watchman = require('fb-watchman');\nvar EventEmitter = require('events').EventEmitter;\nvar RecrawlWarning = require('./utils/recrawl-warning-dedupe');\n\n/**\n * Constants\n */\n\nvar CHANGE_EVENT = common.CHANGE_EVENT;\nvar DELETE_EVENT = common.DELETE_EVENT;\nvar ADD_EVENT = common.ADD_EVENT;\nvar ALL_EVENT = common.ALL_EVENT;\nvar SUB_NAME = 'sane-sub';\n\n/**\n * Export `WatchmanWatcher` class.\n */\n\nmodule.exports = WatchmanWatcher;\n\n\n/**\n * Watches `dir`.\n *\n * @class PollWatcher\n * @param String dir\n * @param {Object} opts\n * @public\n */\n\nfunction WatchmanWatcher(dir, opts) {\n  opts = common.assignOptions(this, opts);\n  this.root = path.resolve(dir);\n  this.init();\n}\n\nWatchmanWatcher.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Run the watchman `watch` command on the root and subscribe to changes.\n *\n * @private\n */\n\nWatchmanWatcher.prototype.init = function() {\n  if (this.client) {\n    this.client.removeAllListeners();\n  }\n\n  var self = this;\n  this.client = new watchman.Client();\n  this.client.on('error', function(error) {\n    self.emit('error', error);\n  });\n  this.client.on('subscription', this.handleChangeEvent.bind(this));\n  this.client.on('end', function() {\n    console.warn('[sane] Warning: Lost connection to watchman, reconnecting..');\n    self.init();\n  });\n\n  this.watchProjectInfo = null;\n\n  function getWatchRoot() {\n    return self.watchProjectInfo ? self.watchProjectInfo.root : self.root;\n  }\n\n  function onCapability(error, resp) {\n    if (handleError(self, error)) {\n      // The Watchman watcher is unusable on this system, we cannot continue\n      return;\n    }\n\n    handleWarning(resp);\n\n    self.capabilities = resp.capabilities;\n\n    if (self.capabilities.relative_root) {\n      self.client.command(\n        ['watch-project', getWatchRoot()], onWatchProject\n      );\n    } else {\n      self.client.command(['watch', getWatchRoot()], onWatch);\n    }\n  }\n\n  function onWatchProject(error, resp) {\n    if (handleError(self, error)) {\n      return;\n    }\n\n    handleWarning(resp);\n\n    self.watchProjectInfo = {\n      root: resp.watch,\n      relativePath: resp.relative_path ? resp.relative_path : ''\n    };\n\n    self.client.command(['clock', getWatchRoot()], onClock);\n  }\n\n\n  function onWatch(error, resp) {\n    if (handleError(self, error)) {\n      return;\n    }\n\n    handleWarning(resp);\n\n    self.client.command(['clock', getWatchRoot()], onClock);\n  }\n\n  function onClock(error, resp) {\n    if (handleError(self, error)) {\n      return;\n    }\n\n    handleWarning(resp);\n\n    var options = {\n      fields: ['name', 'exists', 'new'],\n      since: resp.clock\n    };\n\n    // If the server has the wildmatch capability available it supports\n    // the recursive **/*.foo style match and we can offload our globs\n    // to the watchman server.  This saves both on data size to be\n    // communicated back to us and compute for evaluating the globs\n    // in our node process.\n    if (self.capabilities.wildmatch) {\n      if (self.globs.length === 0) {\n        if (!self.dot) {\n          // Make sure we honor the dot option if even we're not using globs.\n          options.expression = ['match', '**', 'wholename', {\n            includedotfiles: false\n          }];\n        }\n      } else {\n        options.expression = ['anyof'];\n        for (var i in self.globs) {\n          options.expression.push(['match', self.globs[i], 'wholename', {\n            includedotfiles: self.dot\n          }]);\n        }\n      }\n    }\n\n    if (self.capabilities.relative_root) {\n      options.relative_root = self.watchProjectInfo.relativePath;\n    }\n\n    self.client.command(\n      ['subscribe', getWatchRoot(), SUB_NAME, options],\n      onSubscribe\n    );\n  }\n\n  function onSubscribe(error, resp) {\n    if (handleError(self, error)) {\n      return;\n    }\n\n    handleWarning(resp);\n\n    self.emit('ready');\n  }\n\n  self.client.capabilityCheck({\n      optional:['wildmatch', 'relative_root']\n    },\n    onCapability);\n};\n\n/**\n * Handles a change event coming from the subscription.\n *\n * @param {Object} resp\n * @private\n */\n\nWatchmanWatcher.prototype.handleChangeEvent = function(resp) {\n  assert.equal(resp.subscription, SUB_NAME, 'Invalid subscription event.');\n  if (Array.isArray(resp.files)) {\n    resp.files.forEach(this.handleFileChange, this);\n  }\n};\n\n/**\n * Handles a single change event record.\n *\n * @param {Object} changeDescriptor\n * @private\n */\n\nWatchmanWatcher.prototype.handleFileChange = function(changeDescriptor) {\n  var self = this;\n  var absPath;\n  var relativePath;\n\n  if (this.capabilities.relative_root) {\n    relativePath = changeDescriptor.name;\n    absPath = path.join(\n      this.watchProjectInfo.root,\n      this.watchProjectInfo.relativePath,\n      relativePath\n    );\n  } else {\n    absPath = path.join(this.root, changeDescriptor.name);\n    relativePath = changeDescriptor.name;\n  }\n\n  if (!(self.capabilities.wildmatch && !this.hasIgnore) &&\n      !common.isFileIncluded(\n        this.globs,\n        this.dot,\n        this.doIgnore,\n        relativePath)) {\n    return;\n  }\n\n  if (!changeDescriptor.exists) {\n    self.emitEvent(DELETE_EVENT, relativePath, self.root);\n  } else {\n    fs.lstat(absPath, function(error, stat) {\n      // Files can be deleted between the event and the lstat call\n      // the most reliable thing to do here is to ignore the event.\n      if (error && error.code === 'ENOENT') {\n        return;\n      }\n\n      if (handleError(self, error)) {\n        return;\n      }\n\n      var eventType = changeDescriptor.new ? ADD_EVENT : CHANGE_EVENT;\n\n      // Change event on dirs are mostly useless.\n      if (!(eventType === CHANGE_EVENT && stat.isDirectory())) {\n        self.emitEvent(eventType, relativePath, self.root, stat);\n      }\n    });\n  }\n};\n\n/**\n * Dispatches the event.\n *\n * @param {string} eventType\n * @param {string} filepath\n * @param {string} root\n * @param {fs.Stat} stat\n * @private\n */\n\nWatchmanWatcher.prototype.emitEvent = function(\n  eventType,\n  filepath,\n  root,\n  stat\n) {\n  this.emit(eventType, filepath, root, stat);\n  this.emit(ALL_EVENT, eventType, filepath, root, stat);\n};\n\n/**\n * Closes the watcher.\n *\n * @param {function} callback\n * @private\n */\n\nWatchmanWatcher.prototype.close = function(callback) {\n  this.client.removeAllListeners();\n  this.client.end();\n  callback && callback(null, true);\n};\n\n/**\n * Handles an error and returns true if exists.\n *\n * @param {WatchmanWatcher} self\n * @param {Error} error\n * @private\n */\n\nfunction handleError(self, error) {\n  if (error != null) {\n    self.emit('error', error);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Handles a warning in the watchman resp object.\n *\n * @param {object} resp\n * @private\n */\n\nfunction handleWarning(resp) {\n  if ('warning' in resp) {\n    if (RecrawlWarning.isRecrawlWarningDupe(resp.warning)) {\n      return true;\n    }\n    console.warn(resp.warning);\n    return true;\n  } else {\n    return false;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sane/node_modules/sane/src/utils/recrawl-warning-dedupe.js":"'use strict';\n\nvar RECRAWL_WARNINGS = []; // shared structure, one per process.\nvar REG = /Recrawled this watch (\\d+) times, most recently because:\\n([^:]+)/;\n\nmodule.exports = RecrawlWarning;\nfunction RecrawlWarning(root, count) {\n  this.root = root;\n  this.count = count;\n}\n\nRecrawlWarning.RECRAWL_WARNINGS = RECRAWL_WARNINGS;\nRecrawlWarning.REGEXP = REG;\n\nRecrawlWarning.findByRoot = function(root) {\n  for (var i = 0; i < RECRAWL_WARNINGS.length; i++) {\n    var warning = RECRAWL_WARNINGS[i];\n    if (warning.root === root) {\n      return warning;\n    }\n  }\n};\n\nRecrawlWarning.isRecrawlWarningDupe = function(warningMessage) {\n  if (typeof warningMessage !== 'string') { return false; }\n  var match = warningMessage.match(REG);\n  if (!match) { return false; }\n  var count = Number(match[1]);\n  var root = match[2];\n\n  var warning = RecrawlWarning.findByRoot(root);\n\n  if (warning) {\n    // only keep the highest count, assume count to either stay the same or\n    // increase.\n    if (warning.count >= count ) {\n      return true;\n    } else {\n      // update the existing warning to the latest (highest) count\n      warning.count = count;\n      return false;\n    }\n  } else {\n    RECRAWL_WARNINGS.push(new RecrawlWarning(root, count));\n    return false;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sane/node_modules/sane/src/cli.js":"#!/usr/bin/env node\n'use strict';\n\nvar sane = require('../');\nvar argv = require('minimist')(process.argv.slice(2));\nvar execshell = require('exec-sh');\n\nif(argv._.length === 0) {\n  var msg = 'Usage: sane <command> [...directory] [--glob=<filePattern>] ' +\n            '[--poll] [--watchman] [--dot] [--wait=<seconds>]';\n  console.error(msg);\n  process.exit();\n}\n\nvar opts = {};\nvar command = argv._[0];\nvar dir = argv._[1] || process.cwd();\nvar waitTime = Number(argv.wait || argv.w);\nvar dot = argv.dot || argv.d;\nvar glob = argv.glob || argv.g;\nvar poll = argv.poll || argv.p;\nvar watchman = argv.watchman || argv.w;\n\nif (dot) { opts.dot = true; }\nif (glob) { opts.glob = glob; }\nif (poll) { opts.poll = true; }\nif (watchman) { opts.watchman = true; }\n\nvar wait = false;\nvar watcher = sane(dir, opts);\n\nwatcher.on('ready', function () {\n  console.log('Watching: ', dir + '/' + (opts.glob || ''));\n  execshell(command);\n});\n\nwatcher.on('change', function (filepath) {\n  if (wait) { return; }\n  console.log('Change detected in:', filepath);\n  execshell(command);\n\n  if (waitTime > 0) {\n    wait = true;\n    setTimeout(function () {\n      wait = false;\n    }, waitTime * 1000);\n  }\n});\n"}